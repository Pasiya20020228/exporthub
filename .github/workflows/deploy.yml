name: Deploy

on:
  push:
    branches: ["main"]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ secrets.REGISTRY_URL }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push images
        run: |
          set -euo pipefail
          if [ -z "${REGISTRY:-}" ]; then
            echo "REGISTRY_URL secret is not configured; skipping image publish." >&2
            exit 1
          fi
          services=(frontend backend)
          for service in "${services[@]}"; do
            dockerfile="${service}/Dockerfile"
            context="${service}"
            if [ -f "$dockerfile" ]; then
              image_ref="${REGISTRY}/${{ github.repository }}-${service}:${IMAGE_TAG}"
              echo "Building $image_ref from $dockerfile"
              docker build -t "$image_ref" -f "$dockerfile" "$context"
              docker push "$image_ref"
            else
              echo "Skipping ${service}; no Dockerfile found at ${dockerfile}."
            fi
          done

      - name: Publish image digests
        if: always()
        run: docker images

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      TF_IN_AUTOMATION: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure cloud credentials
        if: env.CLOUD_PROVIDER == 'aws'
        run: echo "Add cloud credential setup here."

      - name: Terraform init
        if: hashFiles('infra/**.tf') != ''
        working-directory: infra
        run: terraform init

      - name: Terraform apply
        if: hashFiles('infra/**.tf') != ''
        working-directory: infra
        env:
          TF_VAR_registry_url: ${{ secrets.REGISTRY_URL }}
          TF_VAR_registry_username: ${{ secrets.REGISTRY_USERNAME }}
        run: terraform apply -auto-approve

      - name: Run deployment script
        if: hashFiles('scripts/deploy*.sh') != ''
        run: |
          chmod +x scripts/deploy*.sh
          for script in scripts/deploy*.sh; do
            echo "Executing $script"
            "$script"
          done
